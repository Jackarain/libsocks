FROM alpine:edge as builder

RUN sed -i 's#https\?://dl-cdn.alpinelinux.org/alpine#https://mirror.nju.edu.cn/alpine#g' /etc/apk/repositories

RUN apk add -u alpine-keys --allow-untrusted
RUN apk update
RUN apk upgrade
RUN apk add --no-cache bash git nasm yasm pkgconfig build-base clang cmake ninja linux-headers

ADD . /proxy

# Build the main project as a shared library
RUN cd /proxy && mkdir -p build && cd build \
    && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -G Ninja \
    && ninja

# Optionally build the wolfSSL version (shared library)
# RUN cd /proxy && mkdir -p wolfssl && cd wolfssl \
    # && cmake .. -DCMAKE_BUILD_TYPE=Release -DENABLE_USE_OPENSSL=OFF -DENABLE_USE_WOLFSSL=ON -DBUILD_SHARED_LIBS=ON -G Ninja \
    # && ninja

FROM alpine:edge
RUN apk add --no-cache libstdc++ libgcc openssl
# Final stage - copy shared library and binaries to the final image
COPY --from=builder /proxy/build/lib/libproxy_server.so /usr/local/lib/
# COPY --from=builder /proxy/wolfssl/lib/libproxy_server-wolfssl.so /usr/local/lib/

# Optionally copy any executables you need
# COPY --from=builder /proxy/build/bin/proxy_server /usr/local/bin/
# COPY --from=builder /proxy/wolfssl/bin/proxy_server /usr/local/bin/proxy_server-wolfssl

# COPY /proxy/config/server.conf /etc/proxy_server/server.conf

WORKDIR /root
# ENTRYPOINT ["proxy_server"]
